package com.seeds.yk;

import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.MapHandler;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.apache.log4j.Logger;
import org.junit.Test;

import com.alibaba.druid.pool.DruidDataSourceFactory;
import com.alibaba.fastjson.JSONObject;

/**
 *
 */
public class DB {

    private Logger log=Logger.getLogger(DB.class);
    private final String HSQL="hsqlDB";
    public QueryRunner runner;
    private DataSource ds;
	private String TBName ="tbZJZ";
	public static final DB db = new DB();
	
	public void start() {
		hsqlDB();
		String testSql = " select * from  "+TBName+" limit 1 ";
		try {
			Map<String,Object> map = runner.query(testSql, new MapHandler());
			System.out.println(JSONObject.toJSONString(map,true));
		} catch (SQLException e) {
			throw new RuntimeException("DB:"+TBName+"连接建立失败",e);
		}
		log.info("######DB:"+TBName+"连接建立成功");
	}
	
	public void initHsqlDB() {
		  String sql = "CREATE TABLE "+TBName+"("
		  		+ " lId integer generated by default as identity ,"
		  		+ " nState integer ,"
		  		+ " strLinkName varchar(64),"
		  		+ " strLinkUrl varchar(1024),"
		  		+ " strMsg varchar(256),"
		  		+ " strDateTime varchar(32),"
		  		+ " primary key(lId) "
		  		+ " );";
		  Connection cnn = null ;
		  try {
			cnn = ds.getConnection();
			Statement stmt = cnn.createStatement();
			int result = stmt.executeUpdate(sql);
			log.info("######hsqlDB->table:"+TBName+"创建成功:"+result);
		} catch (SQLException e) {
			throw new RuntimeException("TB:"+TBName+"创建失败",e);
		}finally {
			if(cnn != null) {
				try {
					cnn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	private DataSource getDataSource() {
		return hsqlDB();
	}
	
	public  DataSource hsqlDB() {
		Map<String,Object> pp = new HashMap<String,Object>();
		String url ="jdbc:hsqldb:file:"+getAppPath()+"/hsqlDB/myDB";
		pp.put("url",url);
		pp.put("username","SA");
		pp.put("passowrd", "");
		pp.put("driverClassName", "org.hsqldb.jdbc.JDBCDriver");
		DataSource ds = null;
		try {
			ds = DruidDataSourceFactory.createDataSource(pp);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		this.ds = ds;
		this.runner = new QueryRunner(ds);
		return ds;
	}
	
	public String getAppPath() {
		URL url = DB.class.getResource("");
		String path = url.getPath();
		path = path.substring(0,path.indexOf("YKZJZ"))+"/YKZJZ";
		return path;
	}
	
	@Test
	public void getAll() throws SQLException {
		DB.db.hsqlDB();
		DB.db.start();
		String sql = " select * from tbZJZ ";
		List<Map<String,Object>> mapList = DB.db.runner.query(sql, new MapListHandler());
		for(Map<String,Object> map : mapList){
			System.out.println(JSONObject.toJSONString(map,true));
		}
		System.out.println("======size:"+mapList.size());
	}
	
	@Test
	public void testDB() throws Exception {
		DB.db.hsqlDB();
		//DB.db.initHsqlDB();
		String sql =" insert into tbZJZ(nState,strLinkName,strLinkUrl,strMsg,strDateTime) values(1,'test','http://baidu.com','msg','2018-12-12 23:12:32')";
		//DB.db.runner.update(sql);
		DB.db.start();
	}

	
}
